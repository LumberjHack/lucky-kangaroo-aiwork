#!/usr/bin/env python3
"""
Test du moteur de matching pour Lucky Kangaroo
Teste les suggestions de matching et les cha√Ænes d'√©change
"""

import os
import sys
import requests
import time
import uuid
from datetime import datetime

sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

from app import create_app, db
from app.models.user import User, UserStatus, UserRole
from app.models.listing import Listing, ListingCategory

def test_matching_api():
    """Test complet du moteur de matching"""
    print("üöÄ Test du moteur de matching - Suggestions et cha√Ænes d'√©change")
    
    # Configuration
    app = create_app()
    app.config['TESTING'] = True
    app.config['DATABASE_URL'] = 'sqlite:///test_matching.db'
    app.config['FLASK_ENV'] = 'testing'
    
    with app.app_context():
        # Nettoyer la base de donn√©es
        db.drop_all()
        db.create_all()
        
        # Cr√©er des utilisateurs de test
        users = []
        for i in range(3):
            user = User(
                email=f'test{i+1}@matching.com',
                username=f'testuser{i+1}',
                password_hash='$2b$12$test_hash',
                first_name=f'Test{i+1}',
                last_name='Matching',
                country='CH',
                timezone='Europe/Zurich',
                language='fr',
                currency='CHF',
                preferences={},
                notification_settings={},
                privacy_settings={},
                status=UserStatus.ACTIVE,
                role=UserRole.USER,
                trust_score=5.0,
                ecological_score=5.0,
                total_exchanges=0,
                successful_exchanges=0,
                total_listings=0,
                active_listings=0,
                last_activity=datetime.utcnow()
            )
            db.session.add(user)
            users.append(user)
        
        db.session.commit()
        print("‚úÖ Utilisateurs cr√©√©s")
        
        # Cr√©er des cat√©gories
        categories = []
        category_names = ['√âlectronique', 'V√™tements', 'Maison & Jardin']
        for i, name in enumerate(category_names):
            category = ListingCategory(
                name=name,
                slug=name.lower().replace(' ', '-').replace('&', 'et'),
                description=f'Cat√©gorie {name}',
                sort_order=i+1,
                is_active=True
            )
            db.session.add(category)
            categories.append(category)
        
        db.session.commit()
        print("‚úÖ Cat√©gories cr√©√©es")
        
        # Cr√©er des annonces de test
        listings = []
        listing_data = [
            {
                'title': 'iPhone 13 Pro Max',
                'description': 'iPhone 13 Pro Max 256GB en excellent √©tat',
                'category': 0,  # √âlectronique
                'user': 0,
                'value': 800.0,
                'condition': 'excellent',
                'city': 'Gen√®ve',
                'latitude': 46.2044,
                'longitude': 6.1432
            },
            {
                'title': 'Samsung Galaxy S21',
                'description': 'Samsung Galaxy S21 128GB en tr√®s bon √©tat',
                'category': 0,  # √âlectronique
                'user': 1,
                'value': 600.0,
                'condition': 'very_good',
                'city': 'Lausanne',
                'latitude': 46.5197,
                'longitude': 6.6323
            },
            {
                'title': 'MacBook Pro M1',
                'description': 'MacBook Pro 13" avec puce M1, 512GB SSD',
                'category': 0,  # √âlectronique
                'user': 2,
                'value': 1200.0,
                'condition': 'excellent',
                'city': 'Zurich',
                'latitude': 47.3769,
                'longitude': 8.5417
            },
            {
                'title': 'Veste en cuir',
                'description': 'Veste en cuir v√©ritable, taille M',
                'category': 1,  # V√™tements
                'user': 0,
                'value': 150.0,
                'condition': 'good',
                'city': 'Gen√®ve',
                'latitude': 46.2044,
                'longitude': 6.1432
            },
            {
                'title': 'Table basse en bois',
                'description': 'Table basse en bois massif, style scandinave',
                'category': 2,  # Maison & Jardin
                'user': 1,
                'value': 200.0,
                'condition': 'very_good',
                'city': 'Lausanne',
                'latitude': 46.5197,
                'longitude': 6.6323
            }
        ]
        
        for data in listing_data:
            listing = Listing(
                user_id=users[data['user']].id,
                category_id=categories[data['category']].id,
                title=data['title'],
                description=data['description'],
                listing_type='good',
                condition=data['condition'],
                estimated_value=data['value'],
                currency='CHF',
                city=data['city'],
                latitude=data['latitude'],
                longitude=data['longitude'],
                country='CH',
                exchange_type='both',
                status='active',
                is_featured=False,
                is_boosted=False,
                views_count=0,
                likes_count=0,
                shares_count=0,
                published_at=datetime.utcnow(),
                expires_at=datetime.utcnow(),
                tags='test,matching',
                listing_metadata={}
            )
            db.session.add(listing)
            listings.append(listing)
        
        db.session.commit()
        print("‚úÖ Annonces cr√©√©es")
        
        # D√©marrer le serveur de test
        with app.test_client() as client:
            # Simuler l'authentification
            with app.app_context():
                # Cr√©er un token JWT de test
                from flask_jwt_extended import create_access_token
                token = create_access_token(identity=str(users[0].id))
                
                headers = {
                    'Authorization': f'Bearer {token}',
                    'Content-Type': 'application/json'
                }
                
                print("\nüîç Test 1: Suggestions de matching pour une annonce sp√©cifique")
                response = client.get(f'/api/exchanges/matching/suggestions?listing_id={listings[0].id}&max_distance=100&max_suggestions=5', 
                    headers=headers
                )
                
                print(f"Status: {response.status_code}")
                if response.status_code == 200:
                    data = response.get_json()
                    print("‚úÖ Suggestions de matching r√©ussies")
                    print(f"   - Nombre de suggestions: {data['total']}")
                    print(f"   - Filtres appliqu√©s: {data['filters']}")
                    if data['suggestions']:
                        suggestion = data['suggestions'][0]
                        print(f"   - Meilleure suggestion: {suggestion['listing']['title']}")
                        print(f"   - Score de compatibilit√©: {suggestion['compatibility_score']:.2f}")
                        print(f"   - Distance: {suggestion['distance_km']} km")
                        print(f"   - Raisons du match: {', '.join(suggestion['match_reasons'])}")
                else:
                    print(f"‚ùå Erreur: {response.get_json()}")
                
                print("\nüîç Test 2: Suggestions g√©n√©rales de matching")
                response = client.get('/api/exchanges/matching/suggestions?max_distance=100&max_suggestions=10', 
                    headers=headers
                )
                
                print(f"Status: {response.status_code}")
                if response.status_code == 200:
                    data = response.get_json()
                    print("‚úÖ Suggestions g√©n√©rales r√©ussies")
                    print(f"   - Nombre de suggestions: {data['total']}")
                    if data['suggestions']:
                        suggestion = data['suggestions'][0]
                        print(f"   - Meilleure suggestion: {suggestion['listing']['title']}")
                        print(f"   - Score de compatibilit√©: {suggestion['compatibility_score']:.2f}")
                else:
                    print(f"‚ùå Erreur: {response.get_json()}")
                
                print("\nüîç Test 3: Cha√Ænes d'√©change")
                response = client.get(f'/api/exchanges/matching/chains?listing_id={listings[0].id}&max_chain_length=3&max_distance=200', 
                    headers=headers
                )
                
                print(f"Status: {response.status_code}")
                if response.status_code == 200:
                    data = response.get_json()
                    print("‚úÖ Recherche de cha√Ænes r√©ussie")
                    print(f"   - Nombre de cha√Ænes trouv√©es: {data['total']}")
                    print(f"   - Filtres appliqu√©s: {data['filters']}")
                    if data['chains']:
                        chain = data['chains'][0]
                        print(f"   - Longueur de cha√Æne: {chain['length']}")
                        print(f"   - Distance totale: {chain['total_distance']} km")
                        print(f"   - Score de faisabilit√©: {chain['feasibility_score']:.2f}")
                else:
                    print(f"‚ùå Erreur: {response.get_json()}")
                
                print("\nüîç Test 4: Analyse de compatibilit√© entre deux annonces")
                response = client.post('/api/exchanges/matching/analyze', 
                    json={
                        'listing_id_1': str(listings[0].id),
                        'listing_id_2': str(listings[1].id)
                    },
                    headers=headers
                )
                
                print(f"Status: {response.status_code}")
                if response.status_code == 200:
                    data = response.get_json()
                    print("‚úÖ Analyse de compatibilit√© r√©ussie")
                    analysis = data['analysis']
                    print(f"   - Score de compatibilit√©: {analysis['compatibility_score']:.2f}")
                    print(f"   - Distance: {analysis['distance_km']} km")
                    print(f"   - Facteurs positifs: {analysis['positive_factors']}/{analysis['total_factors']}")
                    print(f"   - Recommandation: {analysis['recommendation']}")
                    if analysis['suggestions']:
                        print(f"   - Suggestions: {', '.join(analysis['suggestions'])}")
                else:
                    print(f"‚ùå Erreur: {response.get_json()}")
                
                print("\nüîç Test 5: Test avec des param√®tres diff√©rents")
                response = client.get(f'/api/exchanges/matching/suggestions?listing_id={listings[0].id}&max_distance=50&max_suggestions=3', 
                    headers=headers
                )
                
                print(f"Status: {response.status_code}")
                if response.status_code == 200:
                    data = response.get_json()
                    print("‚úÖ Test avec param√®tres diff√©rents r√©ussi")
                    print(f"   - Nombre de suggestions: {data['total']}")
                    print(f"   - Distance max: {data['filters']['max_distance']} km")
                    print(f"   - Suggestions max: {data['filters']['max_suggestions']}")
                else:
                    print(f"‚ùå Erreur: {response.get_json()}")
                
                print("\nüîç Test 6: Test d'erreur - Annonce inexistante")
                response = client.get('/api/exchanges/matching/suggestions?listing_id=00000000-0000-0000-0000-000000000000', 
                    headers=headers
                )
                
                print(f"Status: {response.status_code}")
                if response.status_code == 404:
                    print("‚úÖ Gestion d'erreur correcte - Annonce non trouv√©e")
                else:
                    print(f"‚ùå Erreur inattendue: {response.get_json()}")
                
                print("\nüîç Test 7: Test d'erreur - Annonce d'un autre utilisateur")
                # Cr√©er un token pour un autre utilisateur
                other_token = create_access_token(identity=str(users[1].id))
                other_headers = {
                    'Authorization': f'Bearer {other_token}',
                    'Content-Type': 'application/json'
                }
                
                response = client.get(f'/api/exchanges/matching/suggestions?listing_id={listings[0].id}', 
                    headers=other_headers
                )
                
                print(f"Status: {response.status_code}")
                if response.status_code == 404:
                    print("‚úÖ Gestion d'erreur correcte - Annonce d'un autre utilisateur")
                else:
                    print(f"‚ùå Erreur inattendue: {response.get_json()}")
                
                print("\n==================================================")
                print("üéâ Tests du moteur de matching termin√©s !")
                print("üöÄ Le moteur de matching fonctionne correctement")
                
                return True

if __name__ == '__main__':
    if not test_matching_api():
        print("\n==================================================")
        print("‚ùå CERTAINS TESTS DU MOTEUR DE MATCHING ONT √âCHOU√â")
        sys.exit(1)
