version: '3.8'

services:
  # Base de données PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: lk-postgres
    environment:
      POSTGRES_DB: lucky_kangaroo
      POSTGRES_USER: lucky_kangaroo
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - lk-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U lucky_kangaroo -d lucky_kangaroo"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis pour le cache et les sessions
  redis:
    image: redis:7-alpine
    container_name: lk-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - lk-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend Flask
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: lk-backend
    environment:
      - FLASK_ENV=development
      - FLASK_DEBUG=true
      - DATABASE_URL=postgresql://lucky_kangaroo:password@postgres:5432/lucky_kangaroo
      - REDIS_URL=redis://redis:6379/0
      - JWT_SECRET_KEY=jwt-secret-key-change-in-production
      - SECRET_KEY=dev-secret-key-change-in-production
      - FRONTEND_URL=http://localhost:3000
    ports:
      - "5000:5000"
    volumes:
      - ./backend:/app
      - backend_uploads:/app/uploads
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - lk-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend React
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: lk-frontend
    environment:
      - VITE_API_BASE_URL=http://localhost:5000/api/v1
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - backend
    networks:
      - lk-network

  # Celery Worker pour les tâches asynchrones
  celery-worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: lk-celery-worker
    command: celery -A app.celery worker --loglevel=info
    environment:
      - FLASK_ENV=development
      - DATABASE_URL=postgresql://lucky_kangaroo:password@postgres:5432/lucky_kangaroo
      - REDIS_URL=redis://redis:6379/0
      - JWT_SECRET_KEY=jwt-secret-key-change-in-production
      - SECRET_KEY=dev-secret-key-change-in-production
    volumes:
      - ./backend:/app
      - backend_uploads:/app/uploads
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - lk-network

  # Celery Beat pour les tâches périodiques
  celery-beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: lk-celery-beat
    command: celery -A app.celery beat --loglevel=info
    environment:
      - FLASK_ENV=development
      - DATABASE_URL=postgresql://lucky_kangaroo:password@postgres:5432/lucky_kangaroo
      - REDIS_URL=redis://redis:6379/0
      - JWT_SECRET_KEY=jwt-secret-key-change-in-production
      - SECRET_KEY=dev-secret-key-change-in-production
    volumes:
      - ./backend:/app
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - lk-network

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: lk-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - backend
      - frontend
    networks:
      - lk-network

volumes:
  postgres_data:
  redis_data:
  backend_uploads:

networks:
  lk-network:
    driver: bridge