# Lucky Kangaroo - Script de tests
# Ex√©cute tous les tests de l'application

param(
    [string]$TestType = "all",
    [string]$Coverage = "false",
    [string]$Verbose = "false",
    [string]$Parallel = "false"
)

Write-Host "üöÄ Lucky Kangaroo - Lancement des tests..." -ForegroundColor Green

# V√©rifier que Python est install√©
try {
    $pythonVersion = python --version 2>&1
    Write-Host "‚úÖ Python d√©tect√©: $pythonVersion" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Python n'est pas install√© ou n'est pas dans le PATH" -ForegroundColor Red
    exit 1
}

# V√©rifier que pytest est install√©
try {
    $pytestVersion = pytest --version 2>&1
    Write-Host "‚úÖ pytest d√©tect√©: $pytestVersion" -ForegroundColor Green
} catch {
    Write-Host "‚ùå pytest n'est pas install√©. Installation..." -ForegroundColor Yellow
    pip install -r requirements-test.txt
}

# Activer l'environnement virtuel si il existe
if (Test-Path "backend/venv/Scripts/Activate.ps1") {
    Write-Host "üîß Activation de l'environnement virtuel..." -ForegroundColor Blue
    & "backend/venv/Scripts/Activate.ps1"
}

# Construire la commande pytest
$pytestCmd = "pytest"

# Ajouter les options selon les param√®tres
if ($TestType -eq "unit") {
    $pytestCmd += " -m unit"
} elseif ($TestType -eq "integration") {
    $pytestCmd += " -m integration"
} elseif ($TestType -eq "api") {
    $pytestCmd += " -m api"
} elseif ($TestType -eq "database") {
    $pytestCmd += " -m database"
}

if ($Coverage -eq "true") {
    $pytestCmd += " --cov=backend --cov-report=html --cov-report=term-missing"
}

if ($Verbose -eq "true") {
    $pytestCmd += " -v -s"
}

if ($Parallel -eq "true") {
    $pytestCmd += " -n auto"
}

# Ajouter des options communes
$pytestCmd += " --tb=short --color=yes --durations=10"

Write-Host "üìã Commande: $pytestCmd" -ForegroundColor Cyan
Write-Host ""

# Ex√©cuter les tests
try {
    Invoke-Expression $pytestCmd
    
    if ($LASTEXITCODE -eq 0) {
        Write-Host ""
        Write-Host "üéâ Tous les tests ont r√©ussi!" -ForegroundColor Green
        
        if ($Coverage -eq "true") {
            Write-Host "üìä Rapport de couverture g√©n√©r√© dans htmlcov/" -ForegroundColor Blue
        }
    } else {
        Write-Host ""
        Write-Host "‚ùå Certains tests ont √©chou√©" -ForegroundColor Red
        exit $LASTEXITCODE
    }
} catch {
    Write-Host "‚ùå Erreur lors de l'ex√©cution des tests: $_" -ForegroundColor Red
    exit 1
}

Write-Host ""
Write-Host "‚ú® Tests termin√©s!" -ForegroundColor Green
